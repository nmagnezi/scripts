heat_template_version: 2015-10-15

description: A Group of Load Balanced Servers

parameters:

  app_port:
    type: number
    default: 8080
    description: Port used by the servers
  flavor:
    type: string
    default: cirros
    description: Flavor used for servers
    constraints:
    - custom_constraint: nova.flavor
  image:
    type: string
    default: cirros
    description: Image used for servers
    constraints:
    - custom_constraint: glance.image
  lb_port:
    type: number
    default: 80
    description: Port used by the load balancer
  private_network:
    type: string
    default: int_net
    description: Network used by the servers
    constraints:
    - custom_constraint: neutron.network
  public_network:
    type: string
    default: nova
    description: Network used by the load balancer
    constraints:
    - custom_constraint: neutron.network
  private_subnet:
    type: string
    default: int_sub
    description: Subnet on which the pool members will be located
    constraints:
    - custom_constraint: neutron.subnet
  subnet:
    type: string
    default: external_subnet
    description: Subnet on which the load balancer will be located
    constraints:

resources:

  sec_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
      - remote_ip_prefix: 0.0.0.0/0
        protocol: tcp
        port_range_min: { get_param: app_port }
        port_range_max: { get_param: app_port }
      - direction: ingress
        ethertype: IPv4
      - direction: ingress
        ethertype: IPv6

  server1:
    type: OS::Nova::Server
    properties:
      image: { get_param: image }
      flavor: { get_param: flavor }
      networks: [{ network: { get_param: private_network }}]
      security_groups: [{ get_resource: sec_group }]
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #! /bin/sh -v
            Body=$(hostname)
            Response="HTTP/1.1 200 OK\r\nContent-Length: ${#Body}\r\n\r\n$Body"
            while true ; do echo -e $Response | nc -llp PORT; done
          params:
            PORT: { get_param: app_port }

  pool_member1:
    type: OS::Octavia::PoolMember
    properties:
      pool: { get_resource: pool }
      address: { get_attr: [ server1, first_address ]}
      protocol_port: { get_param: app_port }
      subnet: { get_param: private_subnet }

  server2:
    type: OS::Nova::Server
    properties:
      image: { get_param: image }
      flavor: { get_param: flavor }
      networks: [{ network: { get_param: private_network }}]
      security_groups: [{ get_resource: sec_group }]
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #! /bin/sh -v
            Body=$(hostname)
            Response="HTTP/1.1 200 OK\r\nContent-Length: ${#Body}\r\n\r\n$Body"
            while true ; do echo -e $Response | nc -llp PORT; done
          params:
            PORT: { get_param: app_port }

  pool_member2:
    type: OS::Octavia::PoolMember
    properties:
      pool: { get_resource: pool }
      address: { get_attr: [ server2, first_address ]}
      protocol_port: { get_param: app_port }
      subnet: { get_param: private_subnet }

#  monitor:
#    type: OS::Octavia::HealthMonitor
#    properties:
#      delay: 3
#      type: HTTP
#      timeout: 3
#      max_retries: 3
#      pool: { get_resource: pool }

  pool:
    type: OS::Octavia::Pool
    properties:
      lb_algorithm: ROUND_ROBIN
      protocol: HTTP
      listener: { get_resource: listener }

  listener:
    type: OS::Octavia::Listener
    properties:
      loadbalancer: { get_resource: loadbalancer }
      protocol: HTTP
      protocol_port: { get_param: lb_port }

  loadbalancer:
    type: OS::Octavia::LoadBalancer
    properties:
      vip_subnet: { get_param: private_subnet }


outputs:

  lburl:
    value:
      str_replace:
        template: http://IP_ADDRESS:PORT
        params:
          #IP_ADDRESS: { get_attr: [ floating_ip, floating_ip_address ] }
          IP_ADDRESS: { get_attr: [ loadbalancer, vip_address ] }
          PORT: { get_param: lb_port }
    description: >
      This URL is the "external" URL that can be used to access the
      load balancer.
